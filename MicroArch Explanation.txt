With this MicroArch project
we're covered all the topics that are required for a production grade project
1. Service Discovery
2. Centralized Configuration
3. Distributed Tracing
4. Event Driven Architecture
5. Centralized Logging
6. Circuit Breaker
7. Secure Microservice using KeyCloak





1. We created the Product service, Order Service & Created a Discovery Server (Eureka registry) where we've added spring-cloud-starter-netflix-eureka-server
 dependency & @EnableEurekaServer annotation so that it will acts as eureka server which maintains all the eureka clients so that load balancer can detect the appropiate microservice to call

 Also for tihe clients i.e. Product & order service we've just added the client dependency, configured the applicaton name , as we've added the client dependency, clients will automatically look for the
 eureka server by first checking to its default port at 8761 & we've specified the same port in our discovery-server microserve so both the clients will automatically catches the server and registers themselves there.

2. Centralized Configuration
    In microservice world we've multiple instance of services running right? and they could be on different environment like prod, dev, staging, QA etc.
    so in order to change any particular configuration we can actually go inside of that instance which is running a microservice and manually change the configuration
    and then simply re-run the microservice
    but this is way to hectic & in microservices world where we've thousands of microservices running this becomes very difficult to manage
    so
    for that we've this centralized configuration concept that keeps the configuration for all of our microservices at one place
    consider it as a git repo which contains the configuration file where we've defined the configurations based on different environment
    We
    can actually achieve the same using Spring-Cloud-Config-Server dependency
            Spring-Cloud-Config-Server -> Automatically Provides us with RestFul endpoints to those git repo configuration files
                                        -> it automically clones the repo locally (enabled using spring.cloud.config.server.git.clone-on-start = true in configuration file) & create the end points for the clients & clients automatically fetches that & use it   ( micro-services having  spring-cloud-config-client dependency &  spring.cloud.config.uri set to config-server URI -> i.e. -> http://localhost:8888)
            Spring-Cloud-Config dependency automatically handles this for us
            # one main point is that
            # these configurations are required at the startup of a microservice right?
            # so to achieve that
            # we use the spring-boot-starter-bootstrap dependency & specify the SPRING CLOUD URI inside the boostrap.properties file
            # so that these configuration from the git gets loaded first and our application can run successfully

            # We have first created the microservice-config-server repo where we're maintaining the configuration for our
            # order-service
            # product-service

            # Restful end point to get the data from config-server
                    # -> localhost:port/order-service/default
                    # -> localhost:port/product-service/default

           -> In our Configuration-Server Spring boot project
                we've added the dependency & enabled the microservice to be embeddable by using @EnableConfigServer annotation
                i.e. this particular microservice will actually go and clone the repo i.e. mentioned using spring.cloud.config.server.git.uri  (in its configuration file -> application.properties)
           -> In our product & order micro-services
                we've simply added the client dependency & the spring bootstrap starter dependency so that we can specify the micro-service to first fetch the necessary configuration from the config-server by using ( spring.cloud.config.uri )
                and spring-cloud-config automatically handles everything for US (right from finding the config-server & fetching the exact configuration for our micro-service)

    #### We've also added the actuator dependency in both of our Spring-Cloud-Config-Client so that
    # we can make use of
    # @RefreshScope annotation -> check test controller in product-service
            (lets say we've done some modification in those git configuration files and pushed our changes to that microservice-config-server repo )
            (in order to not restart our service & direcly fetch the updated configuration variables we need to use this annotation)
            (if we'll not use this then we manually need to restart our service & what if we've thousands of those microservice instance running ???)
                // @RefreshScope annotation is for configuration refresh so
                // that it will automatically fetch the updated value from the config server
                // we need to add actuator dependency
                // as we need the actuator endpoint to trigger the refresh
                //   -> /actuator/refresh to trigger the configuration refresh
                // we also need to th


    # LIMITATION OF USING @RefreshScope annoatation
        The problem with @refreshScope is basically whenever there's a change in the micro-service configuration file
        We need to hit the actuator endpoint right?
               ---> http://localhost:product-service-port/actuator/refresh
        then only
        @RefreshScope annotation will fetch the updated configuration
        # but what if there's thousands of product-service instance running on server
                # we'll keep hitting this actuator endpoint for every product-service instance ???
                        # this is not feasible as well as practical

    # To overcome this we'll be using RabbitMQ as a message broker
     ----->>>> which will broadcast the changes to all the services that are subscribed to this message broker

        So in our example instead of product-service checking the change in configuration
        it will subscribe to the message broker
        the message broker will inform the same to our product-service as well all other services which are subscribed to it
    # we can also use Kafka if we want
    # which will broadcast the changes to all the services which are subscribed to it
        # we'll be using Spring Cloud Bus Service
        ------->>>> Spring Cloud Bus links the nodes of a distributed system with a lightweight message broker.
               Spring cloud bus will make us of our rabbitMQ message broker
               To enable the To enable the bus, add spring-cloud-starter-bus-amqp as dependency,
                Spring Cloud Bus provides two endpoints, /actuator/bus-refresh and /actuator/bus-env that correspond to individual actuator endpoints in Spring Cloud Commons

        # in both
        # product-service
        # order-service
        # we've configured them to use RabbitMQ by
        # setting host & port in bootstrap.properties

3.